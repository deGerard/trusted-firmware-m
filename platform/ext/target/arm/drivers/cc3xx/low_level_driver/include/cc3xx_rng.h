/*
 * Copyright (c) 2021-2025, The TrustedFirmware-M Contributors. All rights reserved.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 *
 */

#ifndef CC3XX_RNG_H
#define CC3XX_RNG_H

#include "cc3xx_error.h"

#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#ifndef __PACKED_ENUM
#define __PACKED_ENUM enum __attribute__((packed))
#endif

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @brief Size in bytes of the generated entropy per each generation from the TRNG
 *        It is equal to the sizeof(P_CC3XX->rng.ehr_data)
 */
#define CC3XX_RNG_ENTROPY_SIZE (24)

/**
 * @brief Selectable quality of the random number generated by the APIs
 *
 */
enum cc3xx_rng_quality_t {
    CC3XX_RNG_FAST, /*!< Generates random numbers using an LFSR based algo */
    CC3XX_RNG_DRBG, /*!< Generates random numbers using the configured DRBG algo */
};

/**
 * @brief The type describes the IDs of the available ring oscillators (ROSCs) from
 *        which entropy can be generated.
 *
 * @note  If an external TRNG is used then these defines do not apply
 *
 */
__PACKED_ENUM cc3xx_rng_rosc_id_t {
    CC3XX_RNG_ROSC_ID_0 = 0,     /*!< ROSC ID 0 */
    CC3XX_RNG_ROSC_ID_1 = 1,     /*!< ROSC ID 1 */
    CC3XX_RNG_ROSC_ID_2 = 2,     /*!< ROSC ID 2 */
    CC3XX_RNG_ROSC_ID_3 = 3,     /*!< ROSC ID 3 */
};

/**
 * @brief                       SP800-90B section 4.4 recommends two continuous health tests
 *                              to be performed at startup and during normal operation of the
 *                              noise source to verify the quality ot the entropy bits produced,
 *                              namely the Repetition Count Test (4.4.1) and Adaptive Proportion
 *                              Test (4.4.2)
 *
 * @note                        If an external TRNG is used then this function is not available
 *
 * @param[in] enable            Set to \a true to put the TRNG in SP800-90B compatible mode, i.e.
 *                              enable continuous health tests as recommended by SP800-90B
 *
 * @return cc3xx_err_t          CC3XX_ERR_SUCCESS on success, or
 *                              CC3XX_ERR_NOT_IMPLEMENTED in case the firmware is built
 *                              without support for the continuous health tests, i.e.
 *                              \a CC3XX_CONFIG_RNG_CONTINUOUS_HEALTH_TESTS_ENABLE is not
 *                              set in the CC3XX configuration \a cc3xx_config.h
 */
cc3xx_err_t cc3xx_lowlevel_rng_sp800_90b_mode(bool enable);

/**
 * @brief                       Sets the configuration (ROSC_ID, subsampling rate) for
 *                              the usage of the TRNG by the other APIs used by this
 *                              module. If this is not called, default parameters
 *                              defined at build time will be used, i.e.
 *                              (CC3XX_CONFIG_RNG_RING_OSCILLATOR_ID,
 *                              CC3XX_CONFIG_RNG_SUBSAMPLING_RATE)
 *
 * @note                        If an external TRNG is used then this function is not available
 *
 * @param[in] rosc_id           ROSC ID to be used, a number between 0 and 3
 * @param[in] subsampling_rate  Specifies the number of rng_clk cycles between collection
 *                              of consecutive samples of the selected ring oscillator
 *
 * @return cc3xx_err_t          CC3XX_ERR_SUCCESS on success, or
 *                              CC3XX_ERR_RNG_INVALID_TRNG_CONFIG if invalid parameters
 *                              are passed
 */
cc3xx_err_t cc3xx_lowlevel_rng_set_config(enum cc3xx_rng_rosc_id_t rosc_id,
                                          uint32_t subsampling_rate);
/**
 * @brief                       Sets the TRNG_DEBUG_CONTROL register to bypass mode for the
 *                              respective HW tests
 *
 * @note                        If an external TRNG is used then this function is not available
 *
 * @param[in] bypass_autocorr   Set to \a true to bypass the AUTOCORR test
 * @param[in] bypass_crngt      Set to \a true to bypass the CRNGT test
 * @param[in] bypass_vnc        Set to \a true to bypass the Von Neumann balancer test
 *
 */
void cc3xx_lowlevel_rng_set_hw_test_bypass(bool bypass_autocorr, bool bypass_crngt, bool bypass_vnc);

/**
 * @brief                        Requires an amount of entropy from the TRNG
 *
 * @param[out] entropy           Buffer containing the requested entropy
 * @param[in]  entropy_len       Size in bytes of the \p entropy buffer. Must be an
 *                               integer multiple of \def CC3XX_RNG_ENTROPY_SIZE
 *
 * @return                       CC3XX_ERR_SUCCESS on success, another
 *                               cc3xx_err_t on error.
 */
cc3xx_err_t cc3xx_lowlevel_rng_get_entropy(uint32_t *entropy, size_t entropy_len);

/**
 * @brief                        Get random bytes from the CC3XX TRNG.
 *
 * @note                         This function may take a variable amount of
 *                               time to execute. This function may take a
 *                               considerable amount of time to execute if the
 *                               current TRNG entropy pool is depleted and more
 *                               entropy needs generating.
 *
 * @param[out] buf               Buffer to fill with random bytes.
 * @param[in] length             Size of the buffer.
 * @param[in] quality            The TRNG quality used to generate random data.
 *
 * @return                       CC3XX_ERR_SUCCESS on success, another
 *                               cc3xx_err_t on error.
 */
cc3xx_err_t cc3xx_lowlevel_rng_get_random(uint8_t* buf, size_t length,
                                          enum cc3xx_rng_quality_t quality);

/**
 * @brief                        Get a random unsigned integer from the CC3XX
 *                               TRNG. The value is uniformly distributed
 *                               between 0 and bound - 1.
 *
 * @note                         This function may take a variable amount of
 *                               time to execute.
 *
 * @param[in]  bound             A value N such that 0 <= output < N
 * @param[out] uint              A pointer to the uint32_t to output into.
 * @param[in]  quality           The TRNG quality used to generate random data.
 *
 * @return                       CC3XX_ERR_SUCCESS on success, another
 *                               cc3xx_err_t on error.
 */
cc3xx_err_t cc3xx_lowlevel_rng_get_random_uint(uint32_t bound, uint32_t *uint,
                                               enum cc3xx_rng_quality_t quality);

/**
 * @brief                        Initialize a random permutation of a buffer containing
 *                               integers from 0 to len - 1.
 *                               The buffer may be used for DPA mitigations.
 *                               This function gets it's randomness from the TRNG.
 *
 * @note                         This function may take a variable amount of
 *                               time to execute.
 *
 * @param[out] permutation_buf   The buffer to fill with the random permutation.
 * @param[in]  len               Size of the buffer.
 * @param[in]  quality           The TRNG quality used to generate random data.
 *
 */
void cc3xx_lowlevel_rng_get_random_permutation(uint8_t *permutation_buf, size_t len,
                                               enum cc3xx_rng_quality_t quality);

#ifdef __cplusplus
}
#endif

#endif /* CC3XX_RNG_H */
